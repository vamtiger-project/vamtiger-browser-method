{"version":3,"file":"vamtiger-browser-method.js","sources":["../source/types.ts","../source/get-meta-element.ts","../source/get-camel-case.ts","../source/load-element-query-css.ts","../source/load-script.ts","../source/define-custom-element.ts","../source/pause.ts","../source/load-container-stylesheets.ts","../source/get-element-from-template.ts","../source/get-element-from-url.ts","../source/get-element.ts","../source/get-json-ld.ts","../source/get-data.ts","../source/vamtiger-browser-method.ts","../source/load-scripts.ts","../source/load-scripts-sequentially.ts","../source/load-shadow-stylesheet.ts"],"sourcesContent":["import * as tslib from 'tslib/tslib';\nimport { requestIdleCallback } from 'requestidlecallback';\n\nexport enum ScriptType {\n    jsonld = 'application/ld+json'\n}\n\nexport enum ScriptAttribute {\n    type = 'type'\n}\n\nexport enum DataAttribute {\n    vamtigerElementQuery = 'vamtigerLoadElementQueryCss',\n    elementQueryCssLoaded = 'elementQueryCssLoaded'\n}\n\nexport enum ErrorMessage {\n    failedToLoadScript = 'Failed to load script',\n    windowPropertyNotSet = 'Window property not set',\n    unsupportedFeature = 'Unsupported feature',\n    customElementAreadyDefined = 'Custom element already defined',\n    noElementName = 'No Element Name',\n    noTemplateUrl = 'No Template URL',\n    noElementSelector = 'No Template Selector',\n    noTemplateForUrl = 'No Template for URL',\n    noTemplate = 'No Template',\n    noElementForSelector = 'No Element for Selector',\n    noJsonLdParameter = 'No \"jsonLd\" property set'\n}\n\nexport enum StringConstant {\n    nothing = '',\n    slash = '/',\n    dash = '-',\n    pipe = '|',\n    comma = ','\n}\n\nexport enum TagName {\n    div = 'div',\n    template = 'template'\n}\n\nexport enum LinkRel {\n    stylesheet = 'stylesheet'\n}\n\nexport enum LoadScriptElement {\n    script = 'script',\n    link = 'link',\n    style = 'style'\n}\n\nexport enum Selector {\n    lastStylesheet = 'style:last-of-type',\n    lastMetaElement = 'head > meta:last-of-type',\n    webcomponentsjs = 'script[src*=\"@webcomponents\\/webcomponentsjs\"]',\n    style = 'style',\n    stylesheet = ' link[rel=\"stylesheet\"]'\n}\n\nexport enum  MetaElementName {\n    loadElementQueryCss = 'vamtiger-load-element-query-css'\n}\n\nexport enum ScriptNameSuffix {\n    style = 'style',\n    stylesheet = 'stylesheet'\n}\n\nexport interface ILoadRemoteScriptParams {\n    src: string;\n}\n\nexport interface ILoadRemoteStylesheetScriptParams {\n    href: string;\n}\n\nexport interface ILoadLocalScriptParams {\n    name: string;\n    removeFromDom?: boolean;\n}\n\nexport interface ILoadScriptParams {\n    js: string;\n    jsonld?: boolean;\n}\n\nexport interface ILoadStylesheetScriptParams {\n    css: string;\n}\n\nexport interface IAnyObject {\n    [key: string]: any;\n}\n\nexport interface IJsonData {\n    jsonLd: IAnyObject[];\n    json?: IAnyObject;\n}\n\nexport interface ILoadScript {\n    params: LocalScriptParams\n        | LocalStylesheetScriptParams\n        | ILoadRemoteScriptParams\n        | ILoadRemoteStylesheetScriptParams;\n    reject: (error: Error) => void\n}\n\nexport interface ILoadShadowStylesheet {\n    css: string;\n    element: HTMLElement;\n}\n\nexport interface IDefineCustomElement {\n    name: string;\n    constructor: {\n        new (): HTMLElement\n        prototype: HTMLElement;\n    };\n    ignore?: boolean;\n}\n\nexport interface IPause {\n    milliseconds: number;\n}\n\nexport interface IGetElementBase {\n    name: string;\n    loadStylesheets?: boolean;\n}\n\nexport interface IGetElementTemplate extends IGetElementBase {\n    template: string;\n}\n\nexport interface IGetElementUrl extends IGetElementBase {\n    url: string;\n    selector:  string;\n}\n\nexport interface ILoadElementQueryCss {\n    css: string;\n    stylesheetName?: string;\n    hostName?: string;\n}\n\nexport interface IGetMetaElement {\n    selector?: string;\n    properties?: {\n        id?: string;\n    };\n    attributes?: {\n        [key: string]: string;\n    };\n    dataset?: DOMStringMap;\n}\n\nexport interface ILoadContainerStylesheets {\n    name: string;\n    container: HTMLTemplateElement;\n}\n\nexport interface IGetData {\n    jsonLd: string;\n}\n\nexport interface IGetJsonLd {\n    jsonLd: string;\n}\n\nexport type TsLibType = typeof tslib;\n\nexport type TsLibKey = keyof TsLibType;\n\nexport type TsLib = {\n    [K in TsLibKey]: TsLibType[K]\n}\n\nexport type LocalScriptParams = ILoadLocalScriptParams & ILoadScriptParams;\n\nexport type LocalStylesheetScriptParams = ILoadLocalScriptParams & ILoadStylesheetScriptParams;\n\nexport type LoadScriptParams = LocalScriptParams\n    | LocalStylesheetScriptParams\n    | ILoadRemoteScriptParams\n    | ILoadRemoteStylesheetScriptParams;\n\nexport type LoadScriptsParams = LoadScriptParams[];\n\nexport type LoadScriptsSequentiallyParams = LoadScriptsParams[];\n\nexport type LoadedScript<P extends ILoadScript['params']> =\n    P extends ILoadScriptParams ? HTMLScriptElement :\n    P extends ILoadStylesheetScriptParams ? HTMLStyleElement :\n    P extends ILoadRemoteScriptParams ? HTMLScriptElement :\n    P extends ILoadRemoteStylesheetScriptParams ? HTMLLinkElement :\n    never;\n\nexport type LoadedScripts<P extends LoadScriptsParams> =\n    P extends ILoadScriptParams[] ? HTMLScriptElement[] :\n    P extends ILoadStylesheetScriptParams[] ? HTMLStyleElement[] :\n    P extends ILoadRemoteScriptParams[] ? HTMLScriptElement[] :\n    P extends ILoadRemoteStylesheetScriptParams[] ? HTMLLinkElement[] :\n    never;\n\nexport type LoadedScriptsSequentially<P extends LoadScriptsSequentiallyParams> =\n    P extends ILoadScriptParams[][] ? HTMLScriptElement[] :\n    P extends ILoadStylesheetScriptParams[][] ? HTMLStyleElement[] :\n    P extends ILoadRemoteScriptParams[][] ? HTMLScriptElement[] :\n    P extends ILoadRemoteStylesheetScriptParams[][] ? HTMLLinkElement[] :\n    never;\n\nexport type GetElementParams = IGetElementTemplate | IGetElementUrl;\n\nexport type VamtigerBrowserMethod = {\n    loadScript: <P extends LocalScriptParams | LocalStylesheetScriptParams | ILoadRemoteScriptParams | ILoadRemoteStylesheetScriptParams>(params: P) => Promise<LoadedScript<P>>;\n    loadScripts: <P extends LoadScriptParams[]>(params: P) => Promise<LoadedScripts<P>>;\n    loadScriptsSequentially: <P extends LoadScriptParams[][]>(params: P) => Promise<LoadedScriptsSequentially<P>>;\n    loadShadowStylesheet: ({ css, element }: ILoadShadowStylesheet) => void;\n    defineCustomElement: ({ name, constructor, ignore }: IDefineCustomElement) => void;\n    pause: ({ milliseconds }: IPause) => Promise<{}>;\n    getElement: <P extends GetElementParams>(params: P) => Promise<HTMLElement>;\n    getData: ({ jsonLd }: IGetData) => Promise<IJsonData>;\n};\n\ndeclare global {\n    interface Window extends TsLib {\n        VamtigerBrowserMethod: VamtigerBrowserMethod;\n        EQCSS: IAnyObject;\n        requestIdleCallback?: typeof requestIdleCallback\n    }\n\n    namespace NodeJS {\n        interface  Global {\n            VamtigerBrowserMethod: Window['VamtigerBrowserMethod'];\n        }\n    }\n}\n\nexport const regex = {\n    showRootHost: /:{1,2}host/gm,\n    dash: new RegExp(StringConstant.dash, 'g'),\n    space: /\\s/g,\n    nonWord: /\\W+/g\n}","import {\n    IGetMetaElement,\n    StringConstant,\n    Selector\n} from './types';\n\nconst { nothing } = StringConstant;\n\nexport default function ({ selector = nothing, properties = {}, dataset = {}, attributes = {}}: IGetMetaElement) {\n    const { id } = properties;\n    const { head } = document;\n    const lastMetaElement = head.querySelector<HTMLMetaElement>(Selector.lastMetaElement);\n    const attributeKeys = Object.keys(attributes);\n    const existingMetaElement = id && ((window as any)[id]\n        || selector && head.querySelector(selector)) as HTMLMetaElement;\n    const newMetaElment = !existingMetaElement && document.createElement('meta');\n    const metaElement = (existingMetaElement || newMetaElment) as HTMLMetaElement;\n\n    let dataKey: string;\n\n    if (newMetaElment) {\n        Object.assign(newMetaElment, properties);\n        Object.assign(newMetaElment.dataset, dataset);\n\n        if (lastMetaElement && lastMetaElement.nextElementSibling) {\n            head.insertBefore(\n                newMetaElment,\n                lastMetaElement.nextElementSibling\n            );\n        } else {\n            head.appendChild(newMetaElment);\n        }\n    }\n\n    attributeKeys.forEach(key => !metaElement.hasAttribute(key) && metaElement.setAttribute(dataKey, attributes[key]));\n\n    return metaElement;\n}","import {\n    regex,\n    StringConstant\n} from './types';\n\nconst { nothing } = StringConstant;\nconst { nonWord } = regex;\n\nexport default (input: string) => input\n    .split(nonWord)\n    .map((word, index) => !index && word.toLowerCase() || word.slice(0, 1).toUpperCase() + word.slice(1).toLowerCase())\n    .join(nothing);","import {\n    ILoadElementQueryCss,\n    MetaElementName,\n    StringConstant,\n    regex\n} from './types';\nimport getMetaElment from './get-meta-element';\nimport getCamelCase from './get-camel-case';\n\nconst { showRootHost } = regex;\nconst { nothing } = StringConstant;\n\nexport default function({ css, stylesheetName: currentStylesheetName = nothing, hostName = nothing }: ILoadElementQueryCss) {\n    const metaElement = getMetaElment({\n        properties: {\n            id: MetaElementName.loadElementQueryCss\n        }\n    });\n    const stylesheetName = getCamelCase(currentStylesheetName);\n    const { dataset } = metaElement;\n    const elementQueryCss = !dataset.hasOwnProperty(hostName) && (hostName && css.replace(showRootHost, hostName)) || css;\n    const { EQCSS } = window;\n\n    if (elementQueryCss && EQCSS) {\n        EQCSS.register(EQCSS.parse(elementQueryCss));\n\n        if (stylesheetName) {\n            dataset[stylesheetName] = nothing;\n        } else if (hostName) {\n            dataset[hostName] = nothing;\n        }\n    }\n}","import {\n    ILoadScript,\n    ErrorMessage,\n    LocalScriptParams,\n    LocalStylesheetScriptParams,\n    ILoadRemoteStylesheetScriptParams,\n    ILoadRemoteScriptParams,\n    LoadScriptElement,\n    LoadedScript,\n    LinkRel,\n    ScriptAttribute,\n    ScriptType\n} from './types';\nimport loadElementQueryCss from './load-element-query-css';\n\nconst { failedToLoadScript } = ErrorMessage;\nconst { stylesheet } = LinkRel;\nconst { script: scriptElement, link, style } = LoadScriptElement;\n\nexport default <P extends ILoadScript['params']>(params: P) => new Promise((resolve: (script: LoadedScript<P>) => void, reject: ILoadScript['reject']) => {\n    const { head, body } = document;\n    const { js, name: scriptName, jsonld, removeFromDom } = params as LocalScriptParams;\n    const { src } = params as ILoadRemoteScriptParams;\n    const { css, name: stylesheetName } = params as LocalStylesheetScriptParams;\n    const { href } = params as ILoadRemoteStylesheetScriptParams;\n    const remoteScript = params.hasOwnProperty('src') || params.hasOwnProperty('href');\n    const element = (js || src) && scriptElement\n        || css && style\n        || href && link;\n    const selector = src && `script[src=\"${src}\"]`\n        || href && `link[href=\"${href}\"]`\n        || js && scriptName && `script[data-name=\"${scriptName}\"]`\n        || css && stylesheetName && `style[data-name=\"${stylesheetName}\"]`;\n    const existingScript = (head.querySelector(selector) || body.querySelector(selector)) as LoadedScript<P>;\n    const script = selector\n        && element\n        && document.createElement(element) as LoadedScript<P>;\n\n    if (script instanceof HTMLScriptElement) {\n        if (src) {\n            script.src = src;\n        } else if (js) {\n            script.innerHTML = js;\n            script.dataset.name = scriptName;\n\n            if (jsonld) {\n                script.setAttribute(ScriptAttribute.type, ScriptType.jsonld);\n            }\n        }\n    } else if (script instanceof HTMLLinkElement) {\n        script.rel = stylesheet;\n        script.href = href;\n    } else if (script instanceof HTMLStyleElement) {\n        script.innerHTML = css;\n        script.dataset.name = stylesheetName;\n\n        loadElementQueryCss({\n            css,\n            stylesheetName\n        });\n    }\n\n    if (existingScript) {\n        resolve(existingScript);\n    } else if (script) {\n        script.addEventListener('load', handleLoad);\n        script.addEventListener('error', handleLoadError);\n\n        head.appendChild(script);\n\n        if (!remoteScript) {\n            handleLoad();\n        }\n    }\n\n    function handleLoad() {\n        if (script) {\n            removeEventListeners();\n\n            if (removeFromDom) {\n                head.removeChild(script);\n            }\n\n            resolve(script);\n        }\n    }\n\n    function handleLoadError(event: Event) {\n        removeEventListeners();\n\n        console.error(event);\n\n        reject(new Error(`${failedToLoadScript}`));\n    }\n\n    function removeEventListeners() {\n        if (script) {\n            script.removeEventListener('load', handleLoad);\n            script.removeEventListener('error', handleLoadError);\n        }\n    }\n});\n","import { IDefineCustomElement, ErrorMessage } from './types';\n\nconst { unsupportedFeature, customElementAreadyDefined } = ErrorMessage;\n\nexport default function defineCustomElement({ name, constructor, ignore }: IDefineCustomElement) {\n    const { customElements } = window;\n    const define = customElements && customElements.define;\n    const existingElement = define && customElements.get && customElements.get(name);\n\n    if (define && !existingElement) {\n        customElements.define(name, constructor);\n    } else if (existingElement) {\n        throw new Error(`${customElementAreadyDefined}: ${name}`);\n    } else if (!ignore) {\n        defineCustomElement({ name, constructor, ignore: true });\n    } else {\n        throw new Error(`${unsupportedFeature}: Custom Elements - ${name}`);\n    }\n}","import { IPause } from './types';\n\nexport default ({ milliseconds = 1000 }: IPause) => new Promise((resolve, reject) => setTimeout(resolve, milliseconds));","\nimport {\n    ILoadContainerStylesheets,\n    ScriptNameSuffix,\n    StringConstant,\n    Selector\n} from './types';\nimport loadScript from './load-script'\n\nconst { dash } = StringConstant;\n\nexport default function(params: ILoadContainerStylesheets) { return new Promise((resolve: (styleElements: HTMLStyleElement[]) => void, reject) => {\n    const { requestIdleCallback } = window;\n\n    if (requestIdleCallback) {\n        requestIdleCallback(() => loadStylesheets(params, resolve));\n    } else {\n        loadStylesheets(params, resolve);\n    }\n})};\n\nasync function loadStylesheets(params: ILoadContainerStylesheets, resolve: (styleElements: HTMLStyleElement[]) => void) {\n    const { container, name } = params;\n    const styles = Array\n        .from(container.content.querySelectorAll<HTMLStyleElement>(Selector.style))\n        .map((style, index) => ({\n            name: [\n                name,\n                ScriptNameSuffix.style,\n                index++\n            ].join(dash),\n            css: style.innerHTML\n        }));\n    const stylesheets = Array\n        .from(container.content.querySelectorAll<HTMLLinkElement>(Selector.stylesheet))\n        .map((stylesheet, index) => ({\n            name: [\n                name,\n                ScriptNameSuffix.stylesheet,\n                index++\n            ].join(dash),\n            href: stylesheet.href\n        }));\n    const styleElements = await Promise.all([\n        ...styles.map(loadScript),\n        ...stylesheets.map(loadScript)\n    ]);\n\n    resolve(styleElements);\n}","import {\n    IGetElementTemplate,\n    TagName,\n    ErrorMessage\n} from './types';\nimport loadContainerStylesheets from './load-container-stylesheets';\n\nconst {\n    noElementName,\n    noTemplate,\n    noElementForSelector\n} = ErrorMessage;\n\nexport default async function (params: IGetElementTemplate) {\n    const { name, template, loadStylesheets } = params;\n    const container = name && template && document.createElement(TagName.template);\n\n    let element: HTMLElement | null = null;\n\n    if (!name) {\n        throw new Error(noElementName);\n    } else if (!template) {\n        throw new Error(noTemplate);\n    }\n\n    if (container) {\n        container.innerHTML = template;\n\n        element = container.content.firstElementChild as HTMLElement;\n\n        loadStylesheets && element && await loadContainerStylesheets({\n            ...params,\n            container\n        });\n    }\n\n    if (!element) {\n        throw new Error(noElementForSelector);\n    }\n\n    element.dataset.name = name;\n\n    return element;\n}","import {\n    IGetElementUrl,\n    TagName,\n    ErrorMessage\n} from './types';\nimport loadContainerStylesheets from './load-container-stylesheets';\n\nconst {\n    noElementName,\n    noElementSelector,\n    noTemplateUrl,\n    noTemplateForUrl,\n    noElementForSelector\n} = ErrorMessage;\n\nexport default async function (params: IGetElementUrl) {\n    const { name, url, selector, loadStylesheets } = params;\n    const { head } = document;\n    const template = name && selector && url && await fetch(url)\n        .then(response => response.text());\n    const container = template && document.createElement(TagName.template);\n\n    let element: HTMLElement | null = null;\n\n    if (!name) {\n        throw new Error(noElementName);\n    } else if (!selector) {\n        throw new Error(noElementSelector);\n    } else if (!url) {\n        throw new Error(noTemplateUrl);\n    } else if (!template) {\n        throw new Error(noTemplateForUrl);\n    }\n\n    if (container) {\n        container.innerHTML = template;\n\n        element = container.content.querySelector<HTMLElement>(selector);\n\n        loadStylesheets && element && await loadContainerStylesheets({\n            ...params,\n            container\n        });\n    }\n\n    if (!element) {\n        throw new Error(noElementForSelector);\n    }\n\n    element.setAttribute('dataset-name', name);\n\n    return element;\n}\n","import {\n    GetElementParams,\n    IGetElementTemplate,\n    IGetElementUrl\n} from './types';\nimport getElementFromTemplate from './get-element-from-template';\nimport getElementFromUrl from './get-element-from-url';\n\nexport default async function<P extends GetElementParams>(params: P) { return new Promise((resolve: (element: HTMLElement) => void, reject) => {\n    const { requestIdleCallback } = window;\n\n    if (requestIdleCallback) {\n        requestIdleCallback(() => getElement(params, resolve));\n    } else {\n        getElement(params, resolve);\n    }\n})}\n\nexport async function getElement<P extends GetElementParams> (params: P, resolve: (element: HTMLElement) => void) {\n    let element: HTMLElement;\n\n    if ((params as IGetElementUrl).url) {\n        element = await getElementFromUrl(params as IGetElementUrl);\n    } else {\n        element = await getElementFromTemplate(params as IGetElementTemplate);\n    }\n\n    resolve(element);\n}","import {\n    IGetJsonLd,\n    IJsonData\n} from './types';\nimport loadScript from './load-script';\n\nconst { parse } = JSON;\n\nexport default async function({ jsonLd: url }: IGetJsonLd) {\n    const { head } = document;\n    const script = await loadScript({\n        src: url\n    });\n    const jsonLdSelector = `script[type=\"application/ld+json\"][data-json-ld=\"${url}\"]`;\n    const jsonSelector = `script[type=\"application/json\"][data-json-ld=\"${url}\"]`;\n    const [ jsonLd, jsonScript ] = await Promise.all([\n        Array\n            .from(head.querySelectorAll<HTMLScriptElement>(jsonLdSelector))\n            .map(({ innerHTML }) => parse(innerHTML)),\n        head.querySelector<HTMLScriptElement>(jsonSelector)\n    ])\n    const json = jsonScript && parse(jsonScript.innerHTML);\n    const data: IJsonData = {\n        jsonLd\n    };\n\n    if (json) {\n        data.json = json;\n    }\n\n    return data;\n}","import {\n    IGetData,\n    ErrorMessage,\n    IJsonData\n} from './types';\nimport getJsonLd from './get-json-ld';\n\nconst { noJsonLdParameter } = ErrorMessage;\n\nexport default function({ jsonLd }: IGetData) { return new Promise((resolve: (data: IJsonData) => void, reject) => {\n    const { requestIdleCallback } = window;\n\n    if (jsonLd) {\n        if (requestIdleCallback) {\n            requestIdleCallback(() => getJsonLd({ jsonLd }).then(resolve));\n        } else {\n            getJsonLd({ jsonLd }).then(resolve);\n        }\n    } else {\n        reject(new Error(noJsonLdParameter));\n    }\n})}","import loadScript from './load-script';\nimport loadScripts from './load-scripts';\nimport loadScriptsSequentially from './load-scripts-sequentially';\nimport loadShadowStylesheet from './load-shadow-stylesheet';\nimport defineCustomElement from './define-custom-element';\nimport pause from './pause';\nimport getElement from './get-element';\nimport getData from './get-data';\n\nconst { VamtigerBrowserMethod } = window;\nconst vamtigerBrowserMethod = {\n    loadScript,\n    loadScripts,\n    loadScriptsSequentially,\n    loadShadowStylesheet,\n    defineCustomElement,\n    pause,\n    getElement,\n    getData\n};\n\ntry {\n    if (!VamtigerBrowserMethod) {\n        window.VamtigerBrowserMethod = vamtigerBrowserMethod;\n    }\n} catch(error) {\n    global.VamtigerBrowserMethod = VamtigerBrowserMethod;\n}","import { LoadScriptsParams, LoadedScripts } from './types';\nimport loadScript from './load-script';\n\nexport default function <P extends LoadScriptsParams>(params: P) {\n    const scripts = Promise.all(params.map(loadScript)) as Promise<LoadedScripts<P>>;\n\n    return scripts\n}","import { LoadScriptsSequentiallyParams, LoadedScriptsSequentially, LoadScriptParams } from './types';\nimport loadScript from './load-script';\n\nexport default <P extends LoadScriptParams[][]>(params: P) => new Promise((resolve: (scripts: LoadedScriptsSequentially<P>) => void, reject) => {\n    let scripts = new Set();\n    let load = Promise.resolve();\n\n    params.forEach(scriptParams => {\n        load = load\n            .then(async () => await Promise.all(scriptParams.map(loadScript)))\n            .then(loadedScripts => loadedScripts.forEach(script => scripts.add(script)))\n    });\n\n    load = load.then(() => resolve(Array.from(scripts) as LoadedScriptsSequentially<P>));\n\n    return load;\n});","import {\n    ILoadShadowStylesheet,\n    Selector\n} from './types';\nimport loadElementQueryCss from './load-element-query-css';\n\nexport default function ({ css, element }: ILoadShadowStylesheet) {\n    const {\n        shadowRoot,\n        localName: hostName\n    } = element;\n    const lastStylesheet = shadowRoot && shadowRoot.querySelector(Selector.lastStylesheet);\n    const stylesheet = shadowRoot && document.createElement('style');\n\n    if (stylesheet && shadowRoot) {\n        stylesheet.innerHTML = css;\n\n        if (lastStylesheet && lastStylesheet.nextElementSibling) {\n            shadowRoot.insertBefore(stylesheet, lastStylesheet.nextElementSibling);\n        } else {\n            shadowRoot.appendChild(stylesheet);\n        }\n    }\n}"],"names":["ScriptType","ScriptAttribute","DataAttribute","ErrorMessage","StringConstant","TagName","LinkRel","LoadScriptElement","Selector","MetaElementName","ScriptNameSuffix","regex","RegExp","dash","nothing","nonWord","input","split","map","word","index","toLowerCase","slice","toUpperCase","join","showRootHost","_a","css","_b","currentStylesheetName","_c","hostName","metaElement","selector","properties","_d","dataset","_e","attributes","id","head","lastMetaElement","querySelector","attributeKeys","Object","keys","existingMetaElement","window","newMetaElment","document","createElement","assign","nextElementSibling","insertBefore","appendChild","forEach","key","hasAttribute","setAttribute","dataKey","getMetaElment","loadElementQueryCss","stylesheetName","getCamelCase","elementQueryCss","hasOwnProperty","replace","EQCSS","register","parse","failedToLoadScript","stylesheet","scriptElement","link","style","params","Promise","resolve","reject","body","js","scriptName","jsonld","removeFromDom","src","href","remoteScript","element","existingScript","script","handleLoad","removeEventListeners","removeChild","handleLoadError","event","console","error","Error","removeEventListener","HTMLScriptElement","innerHTML","name","type","HTMLLinkElement","rel","HTMLStyleElement","addEventListener","unsupportedFeature","customElementAreadyDefined","requestIdleCallback","loadStylesheets","container","styles","Array","from","content","querySelectorAll","stylesheets","all","loadScript","styleElements","noElementName","noTemplate","noElementForSelector","noElementSelector","noTemplateUrl","noTemplateForUrl","getElement","url","fetch","then","response","text","template","loadContainerStylesheets","getElementFromUrl","firstElementChild","getElementFromTemplate","jsonLdSelector","jsonSelector","jsonLd","jsonScript","json","data","noJsonLdParameter","VamtigerBrowserMethod","vamtigerBrowserMethod","loadScripts","loadScriptsSequentially","scripts","Set","load","scriptParams","loadedScripts","add","loadShadowStylesheet","shadowRoot","lastStylesheet","defineCustomElement","constructor","ignore","customElements","define","existingElement","get","pause","milliseconds","setTimeout","getData","getJsonLd","global"],"mappings":"8bAGA,IAAYA,EAIAC,EAIAC,EAKAC,EAcAC,EAQAC,EAKAC,EAIAC,EAMAC,EAQCC,EAIDC,GA9DZ,SAAYV,GACRA,+BADJ,CAAYA,IAAAA,OAIZ,SAAYC,GACRA,cADJ,CAAYA,IAAAA,OAIZ,SAAYC,GACRA,qDACAA,gDAFJ,CAAYA,IAAAA,OAKZ,SAAYC,GACRA,6CACAA,iDACAA,2CACAA,8DACAA,kCACAA,kCACAA,2CACAA,yCACAA,2BACAA,iDACAA,+CAXJ,CAAYA,IAAAA,OAcZ,SAAYC,GACRA,aACAA,YACAA,WACAA,WACAA,YALJ,CAAYA,IAAAA,OAQZ,SAAYC,GACRA,YACAA,sBAFJ,CAAYA,IAAAA,OAKZ,SAAYC,GACRA,0BADJ,CAAYA,IAAAA,OAIZ,SAAYC,GACRA,kBACAA,cACAA,gBAHJ,CAAYA,IAAAA,OAMZ,SAAYC,GACRA,sCACAA,6CACAA,kEACAA,gBACAA,uCALJ,CAAYA,IAAAA,OAQZ,SAAaC,GACTA,wDADJ,CAAaA,IAAAA,OAIb,SAAYC,GACRA,gBACAA,0BAFJ,CAAYA,IAAAA,OA+KZ,IAAaC,EACK,eADLA,GAEH,IAAIC,OAAOR,EAAeS,KAAM,KAE7B,QC9OLC,YCDA,IAAAA,YACAC,eAEQC,GAAkB,OAAAA,EAC7BC,MAAMF,GACNG,IAAI,SAACC,EAAMC,GAAU,OAACA,GAASD,EAAKE,eAAiBF,EAAKG,MAAM,EAAG,GAAGC,cAAgBJ,EAAKG,MAAM,GAAGD,gBACpGG,KAAKV,ICFFW,IACAX,YAER,WAAwBY,OAAEC,QAAKC,mBAAAC,iBAAiDC,aAAAC,iBACtEC,EFLV,SAAyBN,OAAEE,aAAAK,iBAAoBH,eAAAI,kBAAiBC,YAAAC,kBAAcC,eAAAC,kBAClEC,OACAC,gBACFC,EAAkBD,EAAKE,cAA+BlC,EAASiC,iBAC/DE,EAAgBC,OAAOC,KAAKP,GAC5BQ,EAAsBP,IAAQQ,OAAeR,IAC5CN,GAAYO,EAAKE,cAAcT,IAChCe,GAAiBF,GAAuBG,SAASC,cAAc,QAC/DlB,EAAec,GAAuBE,EAoB5C,OAhBIA,IACAJ,OAAOO,OAAOH,EAAed,GAC7BU,OAAOO,OAAOH,EAAcZ,QAASA,GAEjCK,GAAmBA,EAAgBW,mBACnCZ,EAAKa,aACDL,EACAP,EAAgBW,oBAGpBZ,EAAKc,YAAYN,IAIzBL,EAAcY,QAAQ,SAAAC,GAAO,OAACxB,EAAYyB,aAAaD,IAAQxB,EAAY0B,kBAhBvEC,EAgB6FrB,EAAWkB,MAErGxB,EEvBa4B,EAChB1B,YACIK,GAAI9B,EAAgBoD,uBAGtBC,EAAiBC,EAAalC,GAC5BO,YACF4B,GAAmB5B,EAAQ6B,eAAelC,IAAcA,GAAYJ,EAAIuC,QAAQzC,EAAcM,IAAcJ,EAC1GwC,eAEJH,GAAmBG,IACnBA,EAAMC,SAASD,EAAME,MAAML,IAEvBF,EACA1B,EAAQ0B,GAAkBhD,EACnBiB,IACPK,EAAQL,GAAYjB,ICdxB,IAAAwD,uBACAC,eACAC,WAAuBC,SAAMC,qBAEYC,GAAc,OAAA,IAAIC,QAAQ,SAACC,EAA4CC,GAC5G,IAAAtC,gBAAMuC,gBACRrD,IAAEsD,OAAIC,SAAkBC,WAAQC,kBAC9BC,QACFxD,IAAED,QAAKmC,SACLuB,SACFC,EAAeX,EAAOV,eAAe,QAAUU,EAAOV,eAAe,QACrEsB,GAAWP,GAAMI,IAAQZ,GACxB7C,GAAO+C,GACPW,GAAQZ,EACTxC,EAAWmD,GAAO,eAAeA,QAChCC,GAAQ,cAAcA,QACtBL,GAAMC,GAAc,qBAAqBA,QACzCtD,GAAOmC,GAAkB,oBAAoBA,OAC9C0B,EAAkBhD,EAAKE,cAAcT,IAAa8C,EAAKrC,cAAcT,GACrEwD,EAASxD,GACRsD,GACAtC,SAASC,cAAcqC,GAuC9B,SAASG,IACDD,IACAE,IAEIR,GACA3C,EAAKoD,YAAYH,GAGrBZ,EAAQY,IAIhB,SAASI,EAAgBC,GACrBH,IAEAI,QAAQC,MAAMF,GAEdhB,EAAO,IAAImB,MAAM,GAAG3B,IAGxB,SAASqB,IACDF,IACAA,EAAOS,oBAAoB,OAAQR,GACnCD,EAAOS,oBAAoB,QAASL,IA5DxCJ,aAAkBU,kBACdf,EACAK,EAAOL,IAAMA,EACNJ,IACPS,EAAOW,UAAYpB,EACnBS,EAAOrD,QAAQiE,KAAOpB,EAElBC,GACAO,EAAO/B,aAAazD,EAAgBqG,KAAMtG,EAAWkF,SAGtDO,aAAkBc,iBACzBd,EAAOe,IAAMjC,EACbkB,EAAOJ,KAAOA,GACPI,aAAkBgB,mBACzBhB,EAAOW,UAAYzE,EACnB8D,EAAOrD,QAAQiE,KAAOvC,EAEtBD,GACIlC,MACAmC,oBAIJ0B,EACAX,EAAQW,GACDC,IACPA,EAAOiB,iBAAiB,OAAQhB,GAChCD,EAAOiB,iBAAiB,QAASb,GAEjCrD,EAAKc,YAAYmC,GAEZH,GACDI,QCrEJ,IAAAiB,uBAAoBC,+BCA5B,ICOQ/F,SAER,WAAwB8D,GAAqC,OAAO,IAAIC,QAAQ,SAACC,EAAsDC,GAC3H,IAAA+B,6BAEJA,EACAA,EAAoB,WAAM,OAAAC,EAAgBnC,EAAQE,KAElDiC,EAAgBnC,EAAQE,KAE7B,SAEYiC,EAAgBnC,EAAmCE,mHAsBxC,OArBdkC,EAAoBpC,YAAT0B,EAAS1B,OACtBqC,EAASC,MACVC,KAAKH,EAAUI,QAAQC,iBAAmC5G,EAASkE,QACnExD,IAAI,SAACwD,EAAOtD,GAAU,OACnBiF,MACIA,EACA3F,EAAiBgE,MACjBtD,KACFI,KAAKX,GACPc,IAAK+C,EAAM0B,aAEbiB,EAAcJ,MACfC,KAAKH,EAAUI,QAAQC,iBAAkC5G,EAAS+D,aAClErD,IAAI,SAACqD,EAAYnD,GAAU,OACxBiF,MACIA,EACA3F,EAAiB6D,WACjBnD,KACFI,KAAKX,GACPwE,KAAMd,EAAWc,WAEGT,QAAQ0C,IAC7BN,EAAO9F,IAAIqG,UACXF,EAAYnG,IAAIqG,oBAFjBC,EAAgB9F,SAKtBmD,EAAQ2C,YCxCR,IAAAC,kBACAC,eACAC,yBCFA,IAAAF,kBACAG,sBACAC,kBACAC,qBACAH,yBCMJ,SAAsBI,EAAwCpD,EAAWE,kHAGhEF,EAA0BqD,ODNnC,SAA+BrD,gIACnB0B,EAAyC1B,OAAnCqD,EAAmCrD,MAA9B1C,EAA8B0C,WAApBmC,EAAoBnC,kBAChC1B,eACAvB,EAAA2E,GAAQpE,GAAY+F,MAAaC,MAAMD,GACnDE,KAAK,SAAAC,GAAY,OAAAA,EAASC,yBADatG,0BAM5C,GAJMiF,GAFAsB,MAEwBpF,SAASC,cAAc7C,EAAQgI,UAEzD9C,EAA8B,MAE7Bc,EACD,MAAM,IAAIJ,MAAMwB,GACb,IAAKxF,EACR,MAAM,IAAIgE,MAAM2B,GACb,IAAKI,EACR,MAAM,IAAI/B,MAAM4B,GACb,IAAKQ,EACR,MAAM,IAAIpC,MAAM6B,UAGhBf,GACAA,EAAUX,UAAYiC,EAEtB9C,EAAUwB,EAAUI,QAAQzE,cAA2BT,GAEvD6E,GAAmBvB,KAAiB+C,OAC7B3D,GACHoC,oCAF0BjF,2CAMlC,IAAKyD,EACD,MAAM,IAAIU,MAAM0B,GAKpB,OAFApC,EAAQ7B,aAAa,eAAgB2C,MAE9Bd,QC7BagD,CAAkB5D,wBAAlCY,EAAU7D,sBAEA,SFXlB,SAA+BiD,mHAM3B,GALQ0B,EAAoC1B,OAA9B0D,EAA8B1D,WAApBmC,EAAoBnC,kBACtCoC,EAAYV,GAAQgC,GAAYpF,SAASC,cAAc7C,EAAQgI,UAEjE9C,EAA8B,MAE7Bc,EACD,MAAM,IAAIJ,MAAMwB,GACb,IAAKY,EACR,MAAM,IAAIpC,MAAMyB,UAGhBX,GACAA,EAAUX,UAAYiC,EAEtB9C,EAAUwB,EAAUI,QAAQqB,kBAE5B1B,GAAmBvB,KAAiB+C,OAC7B3D,GACHoC,oCAF0BnF,2CAMlC,IAAK2D,EACD,MAAM,IAAIU,MAAM0B,GAKpB,OAFApC,EAAQnD,QAAQiE,KAAOA,KAEhBd,QElBakD,CAAuB9D,WAAvCY,EAAU7D,iCAGdmD,EAAQU,YCrBJ,IAAAlB,aAER,WAA8B3C,OAAEsG,iIAEb,OADPxF,EAASS,iBACIsE,GACjBnC,IAAK4C,YAIsB,OALhBlG,SAGT4G,EAAiB,oDAAoDV,OACrEW,EAAe,iDAAiDX,UACjCpD,QAAQ0C,KACzCL,MACKC,KAAK1E,EAAK4E,iBAAoCsB,IAC9CxH,IAAI,SAACQ,OAAE0E,cAAgB,OAAA/B,EAAM+B,KAClC5D,EAAKE,cAAiCiG,aAW1C,OAfM/G,EAAyBE,SAAvB8G,OAAQC,OAMVC,EAAOD,GAAcxE,EAAMwE,EAAWzC,WACtC2C,GACFH,UAGAE,IACAC,EAAKD,KAAOA,MAGTC,QCvBH,IAAAC,sBCEA,IAAAC,+BACFC,GACF3B,aACA4B,qBCTkDxE,GAGlD,OAFgBC,QAAQ0C,IAAI3C,EAAOzD,IAAIqG,KDSvC6B,iCEV4CzE,GAAc,OAAA,IAAIC,QAAQ,SAACC,EAA0DC,GACjI,IAAIuE,EAAU,IAAIC,IACdC,EAAO3E,QAAQC,UAUnB,OARAF,EAAOpB,QAAQ,SAAAiG,GACXD,EAAOA,EACFrB,KAAK,+GAAY,SAAMtD,QAAQ0C,IAAIkC,EAAatI,IAAIqG,YAAnC,SAAA7F,iBACjBwG,KAAK,SAAAuB,GAAiB,OAAAA,EAAclG,QAAQ,SAAAkC,GAAU,OAAA4D,EAAQK,IAAIjE,SAG3E8D,EAAOA,EAAKrB,KAAK,WAAM,OAAArD,EAAQoC,MAAMC,KAAKmC,SFC1CM,8BGRqBjI,OAAEC,QAAK4D,YAExBqE,eAGEC,eAAiBD,GAAcA,EAAWlH,cAAclC,EAASqJ,iBACjEtF,EAAaqF,GAAc3G,SAASC,cAAc,SAEpDqB,GAAcqF,IACdrF,EAAW6B,UAAYzE,EAEnBkI,GAAkBA,EAAezG,mBACjCwG,EAAWvG,aAAakB,EAAYsF,EAAezG,oBAEnDwG,EAAWtG,YAAYiB,KHL/BuF,oBRXJ,SAAwBA,EAAoBpI,OAAE2E,SAAM0D,gBAAaC,WACrDC,wBACFC,EAASD,GAAkBA,EAAeC,OAC1CC,EAAkBD,GAAUD,EAAeG,KAAOH,EAAeG,IAAI/D,GAE3E,GAAI6D,IAAWC,EACXF,EAAeC,OAAO7D,EAAM0D,OACzB,CAAA,GAAII,EACP,MAAM,IAAIlE,MAASW,OAA+BP,GAC/C,GAAK2D,EAGR,MAAM,IAAI/D,MAASU,yBAAyCN,GAF5DyD,GAAsBzD,OAAM0D,cAAaC,QAAQ,MQErDK,ePdY3I,OAAEE,iBAAA0I,mBAAkC,OAAA,IAAI1F,QAAQ,SAACC,EAASC,GAAW,OAAAyF,WAAW1F,EAASyF,MOerGvC,oBHTsDpD,8EAAa,SAAO,IAAIC,QAAQ,SAACC,EAAyCC,GACxH,IAAA+B,6BAEJA,EACAA,EAAoB,WAAM,OAAAkB,EAAWpD,EAAQE,KAE7CkD,EAAWpD,EAAQE,WGIvB2F,QDTJ,SAAwB9I,OAAEkH,WAAsB,OAAO,IAAIhE,QAAQ,SAACC,EAAoCC,GAC5F,IAAA+B,6BAEJ+B,EACI/B,EACAA,EAAoB,WAAM,OAAA4D,GAAY7B,WAAUV,KAAKrD,KAErD4F,GAAY7B,WAAUV,KAAKrD,GAG/BC,EAAO,IAAImB,MAAM+C,QCEzB,IACSC,IACDlG,OAAOkG,sBAAwBC,GAErC,MAAMlD,GACJ0E,OAAOzB,sBAAwBA"}